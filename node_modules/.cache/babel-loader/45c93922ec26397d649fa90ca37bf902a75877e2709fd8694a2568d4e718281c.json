{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 文件服务API\nimport axios from 'axios';\n\n// 配置基础URL\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3000';\n\n// 创建axios实例\nconst fileApi = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000 // 30秒超时，适合大文件下载\n});\n\n// 请求拦截器\nfileApi.interceptors.request.use(config => {\n  // 添加认证token（如果需要）\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nfileApi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('文件服务请求失败:', error);\n  return Promise.reject(error);\n});\n\n/**\r\n * 下载文件\r\n * @param {string} filename - 文件名\r\n * @param {string} displayName - 显示名称（可选）\r\n * @returns {Promise}\r\n */\nexport const downloadFile = async (filename, displayName = null) => {\n  try {\n    // 方法1: 通过API下载（推荐用于需要权限控制的场景）\n    const response = await fileApi.get(`/api/files/download/${encodeURIComponent(filename)}`, {\n      responseType: 'blob',\n      headers: {\n        'Accept': 'application/octet-stream'\n      }\n    });\n\n    // 创建下载链接\n    const blob = new Blob([response.data]);\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = displayName || filename;\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n\n    // 清理\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n    return {\n      success: true,\n      message: '下载成功'\n    };\n  } catch (error) {\n    // 如果API下载失败，尝试直接访问静态文件\n    if (error.response?.status === 404 || error.code === 'ECONNREFUSED') {\n      try {\n        return await downloadFileDirectly(filename, displayName);\n      } catch (directError) {\n        throw new Error('文件不存在或无法访问');\n      }\n    }\n\n    // 处理其他错误\n    if (error.response?.status === 403) {\n      throw new Error('没有下载权限');\n    } else if (error.response?.status === 404) {\n      throw new Error('文件不存在');\n    } else if (error.code === 'ECONNABORTED') {\n      throw new Error('下载超时');\n    } else {\n      throw new Error('下载失败，请稍后重试');\n    }\n  }\n};\n\n/**\r\n * 直接下载静态文件（备用方案）\r\n * @param {string} filename - 文件名\r\n * @param {string} displayName - 显示名称\r\n * @returns {Promise}\r\n */\nconst downloadFileDirectly = async (filename, displayName = null) => {\n  try {\n    // 构建文件URL\n    const fileUrl = `/uploads/${encodeURIComponent(filename)}`;\n\n    // 使用fetch获取文件\n    const response = await fetch(fileUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n\n    // 获取文件blob\n    const blob = await response.blob();\n\n    // 创建下载链接\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = displayName || filename;\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n\n    // 清理\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n    return {\n      success: true,\n      message: '下载成功'\n    };\n  } catch (error) {\n    throw new Error('文件下载失败');\n  }\n};\n\n/**\r\n * 获取文件信息\r\n * @param {string} filename - 文件名\r\n * @returns {Promise}\r\n */\nexport const getFileInfo = async filename => {\n  try {\n    const response = await fileApi.get(`/api/files/info/${encodeURIComponent(filename)}`);\n    return response.data;\n  } catch (error) {\n    console.error('获取文件信息失败:', error);\n    throw new Error('获取文件信息失败');\n  }\n};\n\n/**\r\n * 检查文件是否存在\r\n * @param {string} filename - 文件名\r\n * @returns {Promise<boolean>}\r\n */\nexport const checkFileExists = async filename => {\n  try {\n    await fileApi.head(`/api/files/check/${encodeURIComponent(filename)}`);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\r\n * 批量下载文件\r\n * @param {Array} filenames - 文件名数组\r\n * @returns {Promise}\r\n */\nexport const downloadMultipleFiles = async filenames => {\n  const results = [];\n  for (const filename of filenames) {\n    try {\n      await downloadFile(filename);\n      results.push({\n        filename,\n        success: true\n      });\n    } catch (error) {\n      results.push({\n        filename,\n        success: false,\n        error: error.message\n      });\n    }\n  }\n  return results;\n};\nexport default {\n  downloadFile,\n  getFileInfo,\n  checkFileExists,\n  downloadMultipleFiles\n};","map":{"version":3,"names":["axios","API_BASE_URL","import","meta","env","VITE_API_BASE_URL","fileApi","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","console","downloadFile","filename","displayName","get","encodeURIComponent","responseType","blob","Blob","data","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","success","message","status","code","downloadFileDirectly","directError","Error","fileUrl","fetch","ok","getFileInfo","checkFileExists","head","downloadMultipleFiles","filenames","results","push"],"sources":["D:/tax-centre/tax-centre/src/api/fileService.js"],"sourcesContent":["// 文件服务API\r\nimport axios from 'axios'\r\n\r\n// 配置基础URL\r\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3000'\r\n\r\n// 创建axios实例\r\nconst fileApi = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    timeout: 30000, // 30秒超时，适合大文件下载\r\n})\r\n\r\n// 请求拦截器\r\nfileApi.interceptors.request.use(\r\n    (config) => {\r\n        // 添加认证token（如果需要）\r\n        const token = localStorage.getItem('authToken')\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`\r\n        }\r\n        return config\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 响应拦截器\r\nfileApi.interceptors.response.use(\r\n    (response) => {\r\n        return response\r\n    },\r\n    (error) => {\r\n        console.error('文件服务请求失败:', error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n/**\r\n * 下载文件\r\n * @param {string} filename - 文件名\r\n * @param {string} displayName - 显示名称（可选）\r\n * @returns {Promise}\r\n */\r\nexport const downloadFile = async (filename, displayName = null) => {\r\n    try {\r\n        // 方法1: 通过API下载（推荐用于需要权限控制的场景）\r\n        const response = await fileApi.get(`/api/files/download/${encodeURIComponent(filename)}`, {\r\n            responseType: 'blob',\r\n            headers: {\r\n                'Accept': 'application/octet-stream',\r\n            }\r\n        })\r\n\r\n        // 创建下载链接\r\n        const blob = new Blob([response.data])\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = displayName || filename\r\n\r\n        // 触发下载\r\n        document.body.appendChild(link)\r\n        link.click()\r\n\r\n        // 清理\r\n        document.body.removeChild(link)\r\n        window.URL.revokeObjectURL(url)\r\n\r\n        return { success: true, message: '下载成功' }\r\n    } catch (error) {\r\n        // 如果API下载失败，尝试直接访问静态文件\r\n        if (error.response?.status === 404 || error.code === 'ECONNREFUSED') {\r\n            try {\r\n                return await downloadFileDirectly(filename, displayName)\r\n            } catch (directError) {\r\n                throw new Error('文件不存在或无法访问')\r\n            }\r\n        }\r\n\r\n        // 处理其他错误\r\n        if (error.response?.status === 403) {\r\n            throw new Error('没有下载权限')\r\n        } else if (error.response?.status === 404) {\r\n            throw new Error('文件不存在')\r\n        } else if (error.code === 'ECONNABORTED') {\r\n            throw new Error('下载超时')\r\n        } else {\r\n            throw new Error('下载失败，请稍后重试')\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 直接下载静态文件（备用方案）\r\n * @param {string} filename - 文件名\r\n * @param {string} displayName - 显示名称\r\n * @returns {Promise}\r\n */\r\nconst downloadFileDirectly = async (filename, displayName = null) => {\r\n    try {\r\n        // 构建文件URL\r\n        const fileUrl = `/uploads/${encodeURIComponent(filename)}`\r\n\r\n        // 使用fetch获取文件\r\n        const response = await fetch(fileUrl)\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP ${response.status}`)\r\n        }\r\n\r\n        // 获取文件blob\r\n        const blob = await response.blob()\r\n\r\n        // 创建下载链接\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = displayName || filename\r\n\r\n        // 触发下载\r\n        document.body.appendChild(link)\r\n        link.click()\r\n\r\n        // 清理\r\n        document.body.removeChild(link)\r\n        window.URL.revokeObjectURL(url)\r\n\r\n        return { success: true, message: '下载成功' }\r\n    } catch (error) {\r\n        throw new Error('文件下载失败')\r\n    }\r\n}\r\n\r\n/**\r\n * 获取文件信息\r\n * @param {string} filename - 文件名\r\n * @returns {Promise}\r\n */\r\nexport const getFileInfo = async (filename) => {\r\n    try {\r\n        const response = await fileApi.get(`/api/files/info/${encodeURIComponent(filename)}`)\r\n        return response.data\r\n    } catch (error) {\r\n        console.error('获取文件信息失败:', error)\r\n        throw new Error('获取文件信息失败')\r\n    }\r\n}\r\n\r\n/**\r\n * 检查文件是否存在\r\n * @param {string} filename - 文件名\r\n * @returns {Promise<boolean>}\r\n */\r\nexport const checkFileExists = async (filename) => {\r\n    try {\r\n        await fileApi.head(`/api/files/check/${encodeURIComponent(filename)}`)\r\n        return true\r\n    } catch (error) {\r\n        return false\r\n    }\r\n}\r\n\r\n/**\r\n * 批量下载文件\r\n * @param {Array} filenames - 文件名数组\r\n * @returns {Promise}\r\n */\r\nexport const downloadMultipleFiles = async (filenames) => {\r\n    const results = []\r\n\r\n    for (const filename of filenames) {\r\n        try {\r\n            await downloadFile(filename)\r\n            results.push({ filename, success: true })\r\n        } catch (error) {\r\n            results.push({ filename, success: false, error: error.message })\r\n        }\r\n    }\r\n\r\n    return results\r\n}\r\n\r\nexport default {\r\n    downloadFile,\r\n    getFileInfo,\r\n    checkFileExists,\r\n    downloadMultipleFiles\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}