{"ast":null,"code":"// 这是一个模拟的后端API路由处理程序\n// 在实际项目中，这应该是一个Node.js后端服务\n\nimport oracledb from \"oracledb\";\n\n// Oracle数据库连接配置\nconst dbConfig = {\n  user: process.env.ORACLE_USER,\n  password: process.env.ORACLE_PASSWORD,\n  connectString: process.env.ORACLE_CONNECTION_STRING\n};\nexport default async function handler(req, res) {\n  // 只处理POST请求\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      message: \"方法不允许\"\n    });\n  }\n  const {\n    username,\n    password\n  } = req.body;\n  if (!username || !password) {\n    return res.status(400).json({\n      message: \"用户名和密码不能为空\"\n    });\n  }\n  let connection;\n  try {\n    // 连接到Oracle数据库\n    connection = await oracledb.getConnection(dbConfig);\n\n    // 查询用户表验证用户名和密码\n    // 注意：在实际应用中，密码应该是加密存储的，这里简化处理\n    const result = await connection.execute(`SELECT * FROM USERS WHERE USERNAME = :username AND PASSWORD = :password`, {\n      username,\n      password\n    }, {\n      outFormat: oracledb.OUT_FORMAT_OBJECT\n    });\n\n    // 检查是否找到用户\n    if (result.rows.length === 0) {\n      return res.status(401).json({\n        message: \"用户名或密码错误\"\n      });\n    }\n\n    // 用户验证成功\n    const user = result.rows[0];\n\n    // 返回用户信息（不包含密码）\n    return res.status(200).json({\n      id: user.ID,\n      username: user.USERNAME,\n      role: user.ROLE || \"user\"\n    });\n  } catch (error) {\n    console.error(\"数据库查询错误:\", error);\n    return res.status(500).json({\n      message: \"服务器错误，请稍后再试\"\n    });\n  } finally {\n    // 关闭数据库连接\n    if (connection) {\n      try {\n        await connection.close();\n      } catch (err) {\n        console.error(\"关闭数据库连接时出错:\", err);\n      }\n    }\n  }\n}","map":{"version":3,"names":["oracledb","dbConfig","user","process","env","ORACLE_USER","password","ORACLE_PASSWORD","connectString","ORACLE_CONNECTION_STRING","handler","req","res","method","status","json","message","username","body","connection","getConnection","result","execute","outFormat","OUT_FORMAT_OBJECT","rows","length","id","ID","USERNAME","role","ROLE","error","console","close","err"],"sources":["C:/Users/fatbear/Desktop/tax-center/src/api/login.js"],"sourcesContent":["// 这是一个模拟的后端API路由处理程序\n// 在实际项目中，这应该是一个Node.js后端服务\n\nimport oracledb from \"oracledb\"\n\n// Oracle数据库连接配置\nconst dbConfig = {\n  user: process.env.ORACLE_USER,\n  password: process.env.ORACLE_PASSWORD,\n  connectString: process.env.ORACLE_CONNECTION_STRING,\n}\n\nexport default async function handler(req, res) {\n  // 只处理POST请求\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ message: \"方法不允许\" })\n  }\n\n  const { username, password } = req.body\n\n  if (!username || !password) {\n    return res.status(400).json({ message: \"用户名和密码不能为空\" })\n  }\n\n  let connection\n\n  try {\n    // 连接到Oracle数据库\n    connection = await oracledb.getConnection(dbConfig)\n\n    // 查询用户表验证用户名和密码\n    // 注意：在实际应用中，密码应该是加密存储的，这里简化处理\n    const result = await connection.execute(\n      `SELECT * FROM USERS WHERE USERNAME = :username AND PASSWORD = :password`,\n      { username, password },\n      { outFormat: oracledb.OUT_FORMAT_OBJECT },\n    )\n\n    // 检查是否找到用户\n    if (result.rows.length === 0) {\n      return res.status(401).json({ message: \"用户名或密码错误\" })\n    }\n\n    // 用户验证成功\n    const user = result.rows[0]\n\n    // 返回用户信息（不包含密码）\n    return res.status(200).json({\n      id: user.ID,\n      username: user.USERNAME,\n      role: user.ROLE || \"user\",\n    })\n  } catch (error) {\n    console.error(\"数据库查询错误:\", error)\n    return res.status(500).json({ message: \"服务器错误，请稍后再试\" })\n  } finally {\n    // 关闭数据库连接\n    if (connection) {\n      try {\n        await connection.close()\n      } catch (err) {\n        console.error(\"关闭数据库连接时出错:\", err)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,QAAQ,MAAM,UAAU;;AAE/B;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,WAAW;EAC7BC,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAACG,eAAe;EACrCC,aAAa,EAAEL,OAAO,CAACC,GAAG,CAACK;AAC7B,CAAC;AAED,eAAe,eAAeC,OAAOA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC9C;EACA,IAAID,GAAG,CAACE,MAAM,KAAK,MAAM,EAAE;IACzB,OAAOD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAQ,CAAC,CAAC;EACnD;EAEA,MAAM;IAAEC,QAAQ;IAAEX;EAAS,CAAC,GAAGK,GAAG,CAACO,IAAI;EAEvC,IAAI,CAACD,QAAQ,IAAI,CAACX,QAAQ,EAAE;IAC1B,OAAOM,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAa,CAAC,CAAC;EACxD;EAEA,IAAIG,UAAU;EAEd,IAAI;IACF;IACAA,UAAU,GAAG,MAAMnB,QAAQ,CAACoB,aAAa,CAACnB,QAAQ,CAAC;;IAEnD;IACA;IACA,MAAMoB,MAAM,GAAG,MAAMF,UAAU,CAACG,OAAO,CACrC,yEAAyE,EACzE;MAAEL,QAAQ;MAAEX;IAAS,CAAC,EACtB;MAAEiB,SAAS,EAAEvB,QAAQ,CAACwB;IAAkB,CAC1C,CAAC;;IAED;IACA,IAAIH,MAAM,CAACI,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAOd,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAW,CAAC,CAAC;IACtD;;IAEA;IACA,MAAMd,IAAI,GAAGmB,MAAM,CAACI,IAAI,CAAC,CAAC,CAAC;;IAE3B;IACA,OAAOb,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BY,EAAE,EAAEzB,IAAI,CAAC0B,EAAE;MACXX,QAAQ,EAAEf,IAAI,CAAC2B,QAAQ;MACvBC,IAAI,EAAE5B,IAAI,CAAC6B,IAAI,IAAI;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,OAAOpB,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAc,CAAC,CAAC;EACzD,CAAC,SAAS;IACR;IACA,IAAIG,UAAU,EAAE;MACd,IAAI;QACF,MAAMA,UAAU,CAACe,KAAK,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZF,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEG,GAAG,CAAC;MACnC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}